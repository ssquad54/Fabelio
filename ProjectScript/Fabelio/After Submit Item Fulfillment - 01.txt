/**
 *@NApiVersion 2.x
 *@NScriptType UserEventScript
 */
define(['N/record', 'N/search', 'N/transaction'],
    function(record, search, transaction) {
        function afterSubmit(context) {
            if (context.type !== context.UserEventType.EDIT)
                return;
            var itemShip = context.newRecord;

            var createFrom = itemShip.getValue('createdfrom');
            log.debug("CreateFrom", createFrom);

            var shipStatus = itemShip.getText('shipstatus')
            log.debug("shipStatus", shipStatus);

            itemShip.setValue('memo', 'test');

            if (shipStatus == 'Packed') { // Start - If Status: Packed

                var fromRecord = search.lookupFields({ // Get create From Record Type
                    type: search.Type.TRANSACTION,
                    id: createFrom,
                    columns: 'recordtype'
                });
                log.debug("fromType", fromRecord);

                if (fromRecord.recordtype == 'salesorder') { // Start - If Create From Sales Order
                    var loadRecord = record.load({
                        type: record.Type.SALES_ORDER,
                        id: createFrom
                    });
                    log.debug("loadRecord", loadRecord);

                    var linkCount = loadRecord.getLineCount({
                        sublistId: 'links'
                    });
                    log.debug("linkCount", linkCount);

                    for (var i = 0; i < linkCount; i++) {
                        var linkType = loadRecord.getSublistValue({
                            sublistId: 'links',
                            fieldId: 'type',
                            line: i
                        });
                        log.debug("linkType", linkType);

                        var linkId = loadRecord.getSublistValue({
                            sublistId: 'links',
                            fieldId: 'id',
                            line: i
                        });
                        log.debug("linkId", linkId);

                        if (linkType == 'Invoice') { // Start - If Related Record is Invoice
                            var invoiceSO = record.load({
                                type: record.Type.INVOICE,
                                id: linkId
                            });
                            log.debug("InvoiceSO", invoiceSO);

                            var invoiceStatus = invoiceSO.getValue({
                                fieldId: 'status'
                            });
                            log.debug("invoiceStatus", invoiceStatus);

                            // Get Related Record Count
                            var invLinkCount = invoiceSO.getLineCount({
                                sublistId: 'links'
                            });
                            log.debug("invLinkCount", invLinkCount);

                            for (var j = 0; j < linkCount; j++) {
                                var invLinkType = invoiceSO.getSublistValue({
                                    sublistId: 'links',
                                    fieldId: 'type',
                                    line: j
                                });
                                log.debug("invLinkType", invLinkType);

                                var invLinkId = invoiceSO.getSublistValue({
                                    sublistId: 'links',
                                    fieldId: 'id',
                                    line: j
                                });
                                log.debug("invLinkId", invLinkId);

                                if (invLinkType = 'Deposit Application') { // Start -  if Deposit Application - unapply InvoiceSO
                                    var voidDepositApp = transaction.void({
                                        type: transaction.Type.DEPOSIT_APPLICATION,
                                        id: invLinkId
                                    });
                                    log.debug("voidDepositApp", "success Void DEPOSIT_APPLICATION. internalId: " + voidDepositApp);
                                } // End -  if Deposit Application - unapply InvoiceSO
                                /* else */
                                if (invLinkType = 'Credit Memo') { // Start - if Credit Memo - Uncheck apply invoiceSO
                                    var creditMemo = record.load({
                                        type: record.Type.CREDIT_MEMO,
                                        id: invLinkId
                                    });
                                    log.debug("creditMemo", creditMemo);

                                    var sublistLength = creditMemo.getLineCount({
                                        sublistId: 'apply'
                                    });
                                    log.debug("sublistLength", sublistLength);

                                    for (var x = 0; x < sublistLength; x++) {
                                        var creApplyInv = creditMemo.getSublistValue({
                                            sublistId: 'apply',
                                            fieldId: 'internalid',
                                            line: x
                                        });
                                        log.debug("creApplyInv", creApplyInv);

                                        if (creApplyInv = linkId) {
                                            creditMemo.setSublistValue({
                                                sublistId: 'apply',
                                                fieldId: 'apply',
                                                line: x,
                                                value: false
                                            });

                                            var saveCreMemo = creditMemo.save()
                                            log.debug("saveCreMemo", saveCreMemo);
                                        }
                                    }
                                } // End - if Credit Memo - Uncheck apply invoiceSO
                                else if (invLinkType = 'Payment') { //  Start - if Payment - Uncheck Apply InvoiceSO
                                    var custPayment = record.load({
                                        type: record.Type.CUSTOMER_PAYMENT,
                                        id: invLinkId
                                    });
                                    log.debug("custPayment", custPayment);

                                    var CustPymtSublistLength = creditMemo.getLineCount({
                                        sublistId: 'apply'
                                    });
                                    log.debug("CustPymtSublistLength", CustPymtSublistLength);

                                    for (var z = 0; z < CustPymtSublistLength; z++) {
                                        var custPymtApplyInv = custPayment.getSublistValue({
                                            sublistId: 'apply',
                                            fieldId: 'internalid',
                                            line: z
                                        });
                                        log.debug("custPymtApplyInv", custPymtApplyInv);

                                        if (custPymtApplyInv = linkId) {
                                            custPayment.setSublistValue({
                                                sublistId: 'apply',
                                                fieldId: 'apply',
                                                line: x,
                                                value: false
                                            });

                                            var saveCustPymt = creditMemo.save()
                                            log.debug("saveCustPymt", saveCustPymt);
                                        }
                                    }
                                } ///  End - if Payment - Uncheck Apply InvoiceSO
                            }
                            var voidInvoice = transaction.void({
                                type: transaction.Type.INVOICE,
                                id: linkId
                            });
                            log.debug("voidInvoice", voidInvoice);

                        } // End - If Related Record is Invoice
                    }
                } // End - If Create From Sales Order
            } // End - If Status: Packed
        }
        return {
            afterSubmit: afterSubmit
        };
    });
